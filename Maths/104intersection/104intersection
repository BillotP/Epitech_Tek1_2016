#!/usr/bin/env python
# coding: utf8

import math
import sys

#gestion d'erreurs
if len(sys.argv) != 9:
   sys.stderr.write('bad arguments')
   sys.exit(84)
#affichage des coordonnées reçues
if sys.argv[1] == '1':
   print("sphere of radius %c" % (sys.argv[8]))
if sys.argv[1] == '2':
   print("cylinder of radius %c" % (sys.argv[8]))
if sys.argv[1] == '3':
   print("cone of %s degree angle" % (sys.argv[8]))

print("straight line going through the (%d, %d, %d) point and of direction vector (%d,%d,%d)" % (int(sys.argv[2]), int(sys.argv[3]), int(sys.argv[4]), int(sys.argv[5]), int(sys.argv[6]), int(sys.argv[7])))

## Sphere : p est le rayon de la sphere #
if sys.argv[1] == '1':
    xp = int(sys.argv[2])
    yp = int(sys.argv[3])
    zp = int(sys.argv[4])
    xv = int(sys.argv[5])
    yv = int(sys.argv[6])
    zv = int(sys.argv[7])
    p = int(sys.argv[8])
    a = math.pow(xv,2) + math.pow(yv,2) + math.pow(zv,2)
    b = (2 * xp * xv) + (2 * yp * yv) + (2 * zp * zv)
    c = math.pow(xp,2)+ math.pow(yp,2) + math.pow(zp,2) - math.pow(p,2)
    if a == 0:
        sys.exit(84)
    discri = math.pow(b,2) - 4*(a*c)
    if discri < 0:
        print("No intersection point.")
        sys.exit(0)
    if discri == 0:
        lam = (-b / 2) / a
        xn = xp + lam * xv
        yn = yp + lam * yv
        zn = zp + lam * zv
        print("1 intersection point\n(%0.3f, %0.3f, %0.3f)" % (xn, yn, zn))
        sys.exit(0)
    if discri > 0:
        lam1 = ((-b - math.sqrt(discri)) / 2) / a
        lam2 = ((-b + math.sqrt(discri)) / 2) / a
        x1n = xp + lam1*xv
        y1n = yp + lam1*yv
        z1n = zp + lam1*zv
        x2n = xp + lam2*xv
        y2n = yp + lam2*yv
        z2n = zp + lam2*zv
        print("2 intersection point\n(%0.3f, %0.3f, %0.3f)" % (x2n, y2n, z2n))
        print("(%0.3f, %0.3f, %0.3f)" % (x1n, y1n, z1n))
        sys.exit(0)

## Cylindre : p est le rayon du cylindre
if sys.argv[1] == '2':
    xp = int(sys.argv[2])
    yp = int(sys.argv[3])
    zp = int(sys.argv[4])
    xv = int(sys.argv[5])
    yv = int(sys.argv[6])
    zv = int(sys.argv[7])
    p = int(sys.argv[8])
    a = math.pow(xv,2) + math.pow(yv,2)
    b = (2*xp*xv)+ (2*yp*yv)
    c = math.pow(xp,2) + math.pow(yp,2) - math.pow(p,2)
    if a == 0:
        if zv == 0:
            sys.exit(84)
        else:
            if c == 0:
                print("There is an infinite number of intersection points.")
                sys.exit(0)
            else:
                sys.exit(84)
    discri = math.pow(b,2) - 4*(a*c)
    if discri < 0:
        print("No intersection point.")
        sys.exit(0)
    if discri == 0:
        lam = (-b / 2) / a
        xn = xp + lam * xv
        yn = yp + lam * yv
        zn = zp + lam * zv
        print("1 intersection point\n(%0.3f, %0.3f, %0.3f)" % (xn, yn, zn))
        sys.exit(0)
    if discri > 0:
        lam1 = ((-b - math.sqrt(discri)) / 2) / a
        lam2 = ((-b + math.sqrt(discri)) / 2) / a
        x1n = xp + lam1*xv
        y1n = yp + lam1*yv
        z1n = zp + lam1*zv
        x2n = xp + lam2*xv
        y2n = yp + lam2*yv
        z2n = zp + lam2*zv
        print("2 intersection point\n(%0.3f, %0.3f, %0.3f)" % (x2n, y2n, z2n))
        print("(%0.3f, %0.3f, %0.3f)" % (x1n, y1n, z1n))
        sys.exit(0)

## Cone : p est l angle du cone
if sys.argv[1] == '3':
    xp = int(sys.argv[2])
    yp = int(sys.argv[3])
    zp = int(sys.argv[4])
    xv = int(sys.argv[5])
    yv = int(sys.argv[6])
    zv = int(sys.argv[7])
    p = int(sys.argv[8])
    a = math.pow(xv,2) + math.pow(yv,2) - math.pow(zv*(math.tan((p/180 * math.pi))), 2)
    b = (2*xp*xv) + (2*yp*yv) - ((2*zp*zv) * (math.pow(math.tan(p/180 * math.pi), 2)))
    c = math.pow(xp,2) + math.pow(yp,2) - math.pow(zp,2) * math.pow(math.tan(p/180 * math.pi), 2)
    a = round(a, 6)
    b = round(b, 6)
    c = round(c, 6)
    discri = math.pow(b,2) - 4*(a*c)
    if a == 0:
        if b == 0:
            if c == 0:
                print("There is an infinite number of intersection points.")
                sys.exit(0)
            else:
                sys.exit(84)
        else:
            discri = -c / b
    if discri < 0:
        print("No intersection point.")
        sys.exit(0)
    if discri == 0:
        lam = (-b / 2) / a
        xn = xp + lam * xv
        yn = yp + lam * yv
        zn = zp + lam * zv
        print("1 intersection point\n(%0.3f, %0.3f, %0.3f)" % (xn, yn, zn))
        sys.exit(0)
    if discri > 0:
        lam1 = ((-b - math.sqrt(discri)) / 2) / a
        lam2 = ((-b + math.sqrt(discri)) / 2) / a
        x1n = xp + lam1*xv
        y1n = yp + lam1*yv
        z1n = zp + lam1*zv
        x2n = xp + lam2*xv
        y2n = yp + lam2*yv
        z2n = zp + lam2*zv
        print("2 intersection point\n(%0.3f, %0.3f, %0.3f)" % (x2n, y2n, z2n))
        print("(%0.3f, %0.3f, %0.3f)" % (x1n, y1n, z1n))
        sys.exit(0)
##tg(p) est la tangente de l’angle p, comme d’habitude
##si p est en degré, il faut prendre : tangente (p/180*pi)
